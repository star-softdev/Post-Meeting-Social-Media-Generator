// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  meetings      Meeting[]
  automations   Automation[]
  socialAccounts SocialAccount[]
  settings      UserSettings?
  integrations  Integration[]
  abTests       ABTest[]
  posts         Post[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Meeting {
  id          String   @id @default(cuid())
  title       String
  startTime   DateTime
  endTime     DateTime
  platform    String   // zoom, teams, google meet
  meetingUrl  String?
  transcript  String?
  attendees   String[] // JSON array of attendee names
  botId       String?  // recall.ai bot ID
  status      String   @default("scheduled") // scheduled, completed, failed
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Post {
  id          String   @id @default(cuid())
  content     String
  platform    String   // linkedin, facebook
  status      String   @default("draft") // draft, posted
  meetingId   String
  meeting     Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  automationId String?
  automation  Automation? @relation(fields: [automationId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Automation {
  id                String   @id @default(cuid())
  name              String
  type              String   // "Generate post"
  platform          String   // linkedin, facebook
  description       String
  example           String?
  isActive          Boolean  @default(true)
  triggerConditions Json?    // JSON object for trigger conditions
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts             Post[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model SocialAccount {
  id                String   @id @default(cuid())
  platform          String   // linkedin, facebook
  accessToken       String
  refreshToken      String?
  expiresAt         DateTime?
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([userId, platform])
}

model UserSettings {
  id                      String   @id @default(cuid())
  botJoinMinutesBefore    Int      @default(5)
  defaultAutomationEnabled Boolean  @default(true)
  userId                  String   @unique
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String
  action      String
  resource    String
  resourceId  String
  timestamp   DateTime @default(now())
  ipAddress   String?
  userAgent   String?
  metadata    Json?
  result      String   // SUCCESS, FAILURE
  errorMessage String?
}

model Integration {
  id        String   @id @default(cuid())
  name      String
  type      String   // slack, teams, salesforce, hubspot, zapier
  config    Json
  status    String   @default("active") // active, inactive, error
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AnalyticsEvent {
  id        String   @id @default(cuid())
  userId    String
  eventType String
  data      Json
  timestamp DateTime @default(now())
}

model ContentVariant {
  id          String   @id @default(cuid())
  contentId   String
  variant     String   // A, B, C, etc.
  content     String
  performance Json?    // engagement metrics
  abTestId    String
  abTest      ABTest   @relation(fields: [abTestId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
}

model ABTest {
  id          String   @id @default(cuid())
  name        String
  type        String   // headline, cta, tone, length
  status      String   @default("active") // active, completed, paused
  variants    ContentVariant[]
  results     Json?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model DataRetentionPolicy {
  id                String   @id @default(cuid())
  classification    String   // public, internal, confidential, restricted
  retentionPeriod   Int      // days
  autoDelete        Boolean  @default(false)
  encryptionRequired Boolean @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model EncryptionKey {
  id        String   @id @default(cuid())
  userId    String
  keyHash   String
  salt      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RateLimit {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String
  count     Int      @default(0)
  window    DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, endpoint, window])
}

model SystemMetric {
  id        String   @id @default(cuid())
  name      String
  value     Float
  labels    Json?
  timestamp DateTime @default(now())
}

model HealthCheck {
  id        String   @id @default(cuid())
  service   String
  status    String   // healthy, degraded, unhealthy
  latency   Int?     // milliseconds
  error     String?
  timestamp DateTime @default(now())
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  meetings      Meeting[]
  automations   Automation[]
  socialAccounts SocialAccount[]
  settings      UserSettings?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Meeting {
  id          String   @id @default(cuid())
  title       String
  startTime   DateTime
  endTime     DateTime
  platform    String   // zoom, teams, google meet
  meetingUrl  String?
  transcript  String?
  attendees   String[] // JSON array of attendee names
  botId       String?  // recall.ai bot ID
  status      String   @default("scheduled") // scheduled, completed, failed
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Post {
  id          String   @id @default(cuid())
  content     String
  platform    String   // linkedin, facebook
  status      String   @default("draft") // draft, posted
  meetingId   String
  meeting     Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  automationId String?
  automation  Automation? @relation(fields: [automationId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Automation {
  id          String   @id @default(cuid())
  name        String
  type        String   // "Generate post"
  platform    String   // linkedin, facebook
  description String
  example     String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SocialAccount {
  id                String   @id @default(cuid())
  platform          String   // linkedin, facebook
  accessToken       String
  refreshToken      String?
  expiresAt         DateTime?
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model UserSettings {
  id                    String   @id @default(cuid())
  botJoinMinutesBefore  Int      @default(5)
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}
